
```{r}
#| include: false
library(DBI)
library(knitr)
library(odbc)
con <- dbConnect(odbc::odbc(), dsn="nycflights13", timeout = 10)
```

```{sql}
#| connection: con

/* Import table for planes
Complete the missing code here
Submit the missing code only in your report */

-- Import table for airports
DROP TABLE IF EXISTS airports CASCADE;
CREATE TABLE airports (
    faa CHAR(3),
    name VARCHAR(255),
    lat NUMERIC,
    lon NUMERIC,
    alt INT,
    tz INT,
    dst CHAR(1),
    tzone VARCHAR(255),
    PRIMARY KEY (faa)
);
COPY airports
FROM '/tmp/nycflights/airports.csv'
CSV HEADER;
```


```{sql}
#| connection: con
SELECT 
    a.origin AS "Three-letter airport code", 
    ap.name AS "Airport name", 
    COUNT(DISTINCT a.dest) AS "Number of destinations",
    RANK() OVER (ORDER BY COUNT(DISTINCT a.dest) DESC) AS "Rank"
FROM 
    flights AS a
INNER JOIN 
    airports AS ap ON a.origin = ap.faa
GROUP BY 
    a.origin, ap.name
ORDER BY 
    "Rank", "Three-letter airport code";

```

```{sql}
/* Which ten destination airports are served by the greatest number of seats from New York City? */
#| connection: con
SELECT 
    f.dest AS "Three-letter airport code", 
    ap.name AS "Airport name", 
    SUM(pl.seats) AS "Number of seats",
    RANK() OVER (ORDER BY SUM(pl.seats) DESC) AS "Rank"
FROM 
    flights AS f
INNER JOIN 
    planes AS pl ON f.tailnum = pl.tailnum
INNER JOIN 
    airports AS ap ON f.dest = ap.faa
GROUP BY 
    f.dest, ap.name
ORDER BY 
    "Rank", "Three-letter airport code"
LIMIT 10;
```

```{sql}
#| connection: con
SELECT 
    f.origin AS "Three-letter airport code", 
    ap.name AS "Airport name", 
    ROUND(AVG(f.dep_delay), 2) AS "Mean departure delay in minutes",
    RANK() OVER (ORDER BY AVG(f.dep_delay) DESC) AS "Rank"
FROM 
    flights AS f
INNER JOIN 
    airports AS ap ON f.origin = ap.faa
GROUP BY 
    f.origin, ap.name
ORDER BY 
    "Rank", "Three-letter airport code";

```

```{sql}
#| connection: con
SELECT 
    f.hour AS "Hour of the day", 
    ROUND(
        (SUM(CASE WHEN f.dep_delay <= 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 
        2
    ) AS "Percentage of on-time departures"
FROM 
    flights AS f
GROUP BY 
    f.hour
ORDER BY 
    f.hour;
```


```{sql}
#| connection: con
SELECT 
    f.tailnum AS "Tail number", 
    p.manufacturer AS "Manufacturer", 
    p.model AS "Model",
    COUNT(DISTINCT f.carrier) AS "Number of airlines"
FROM 
    flights AS f
INNER JOIN 
    planes AS p ON f.tailnum = p.tailnum
GROUP BY 
    f.tailnum, p.manufacturer, p.model
HAVING 
    COUNT(DISTINCT f.carrier) > 1
ORDER BY 
    f.tailnum;
```    
    
    
    
```{sql}
#| connection: con
CREATE OR REPLACE VIEW chicago_airports AS
SELECT 
    faa, 
    name
FROM 
    airports
WHERE 
    name ILIKE '%Chicago%';
``` 



```{sql}
#| connection: con
SELECT 
    f.dest AS "Three-letter code of the destination airport", 
    a.name AS "Name of the destination airport", 
    COUNT(*) AS "Number of flights",
    RANK() OVER (ORDER BY COUNT(*) DESC) AS "Rank"
FROM 
    flights AS f
INNER JOIN 
    airports AS a ON f.dest = a.faa
WHERE 
    f.dest IN (SELECT faa FROM chicago_airports)
GROUP BY 
    f.dest, a.name
ORDER BY 
    "Rank", "Three-letter code of the destination airport";

``` 




```{sql}
#| connection: con

SELECT 
    f.carrier AS "Two-letter airline code", 
    al.name AS "Airline name", 
    COUNT(*) AS "Number of flights",
    RANK() OVER (ORDER BY COUNT(*) DESC) AS "Rank"
FROM 
    flights AS f
INNER JOIN 
    airlines AS al ON f.carrier = al.carrier
WHERE 
    f.dest IN (SELECT faa FROM chicago_airports)
GROUP BY 
    f.carrier, al.name
ORDER BY 
    "Rank", "Two-letter airline code";
``` 




```{sql}
#| connection: con
SELECT 
    f.carrier AS "Two-letter airline code", 
    al.name AS "Airline name",
    ROUND(
        (SUM(CASE WHEN f.arr_delay <= 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 
        2
    ) AS "Percentage of on-time arrivals",
    RANK() OVER (ORDER BY ROUND(
        (SUM(CASE WHEN f.arr_delay <= 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 
        2
    ) DESC) AS "Rank"
FROM 
    flights AS f
INNER JOIN 
    airlines AS al ON f.carrier = al.carrier
WHERE 
    f.dest IN (SELECT faa FROM chicago_airports)
GROUP BY 
    f.carrier, al.name
HAVING 
    COUNT(*) >= 100
ORDER BY 
    "Rank", "Two-letter airline code";
``` 




```{sql}
#| connection: con
SELECT 
    CASE 
        WHEN COUNT(*) = 365 THEN 'TRUE'
        ELSE 'FALSE'
    END AS "Was at least one departure from New York City to Chicago scheduled every day in 2013?"
FROM (
    SELECT 
        year, month, day
    FROM 
        flights
    WHERE 
        dest IN (SELECT faa FROM chicago_airports)
    GROUP BY 
        year, month, day
) AS daily_flights;
``` 





```{sql}
#| connection: con
SELECT 
    COUNT(*) AS "Count of missing combinations"
FROM 
    flights f
LEFT JOIN 
    weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
WHERE 
    w.origin IS NULL;
``` 





```{sql}
#| connection: con
SELECT 
    f.origin AS "Three-letter airport code", 
    a.name AS "Airport name",
    CASE WHEN w.precip = 0 THEN TRUE ELSE FALSE END AS is_dry,
    ROUND(
        (SUM(CASE WHEN f.dep_delay <= 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 
        2
    ) AS "Percentage of on-time departures"
FROM 
    flights f
INNER JOIN 
    weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
INNER JOIN 
    airports a ON f.origin = a.faa
GROUP BY 
    f.origin, a.name, is_dry
ORDER BY 
    f.origin, is_dry;
``` 




```{sql}
#| connection: con
SELECT 
    f.origin AS "Three-letter airport code", 
    a.name AS "Airport name",
    ROUND(AVG(f.dep_delay), 2) AS "Mean departure delay in minutes",
    RANK() OVER (ORDER BY AVG(f.dep_delay)) AS "Rank"
FROM 
    flights f
INNER JOIN 
    weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
INNER JOIN 
    airports a ON f.origin = a.faa
WHERE 
    w.visib < 1
GROUP BY 
    f.origin, a.name
ORDER BY 
    "Rank", "Three-letter airport code";

``` 




```{sql}
#| connection: con
SELECT 
    ROUND(CAST(CORR(avg_temp, avg_dep_delay) AS NUMERIC), 2) AS "Correlation coefficient"
FROM (
    SELECT 
        DATE(f.time_hour) AS flight_date,
        AVG(w.temp) AS avg_temp,
        AVG(f.dep_delay) AS avg_dep_delay
    FROM 
        flights f
    INNER JOIN 
        weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
    GROUP BY 
        DATE(f.time_hour)
) AS daily_stats;
``` 




```{sql}
#| connection: con
SELECT 
    CASE 
        WHEN w.wind_dir BETWEEN 135 AND 225 THEN 'South'
        WHEN w.wind_dir BETWEEN 0 AND 45 OR w.wind_dir BETWEEN 315 AND 360 THEN 'North'
    END AS wind_direction,
    ROUND(AVG(f.air_time), 2) AS mean_air_time
FROM 
    flights f
INNER JOIN 
    weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
WHERE 
    f.dest = 'BTV'
    AND (w.wind_dir BETWEEN 135 AND 225 OR w.wind_dir BETWEEN 0 AND 45 OR w.wind_dir BETWEEN 315 AND 360)
GROUP BY 
    wind_direction;
``` 



```{sql}
#| connection: con


``` 
    
    
    